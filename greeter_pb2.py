# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: greeter.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='greeter.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\rgreeter.proto\"\x1c\n\x0cHelloRequest\x12\x0c\n\x04name\x18\x01 \x01(\t\"\x1d\n\nHelloReply\x12\x0f\n\x07message\x18\x01 \x01(\t2\xd2\x01\n\x07Greeter\x12(\n\x08SayHello\x12\r.HelloRequest\x1a\x0b.HelloReply\"\x00\x12\x31\n\x0fSayHelloGoodbye\x12\r.HelloRequest\x1a\x0b.HelloReply\"\x00\x30\x01\x12\x32\n\x0eSayHelloToMany\x12\r.HelloRequest\x1a\x0b.HelloReply\"\x00(\x01\x30\x01\x12\x36\n\x14SayHelloToManyAtOnce\x12\r.HelloRequest\x1a\x0b.HelloReply\"\x00(\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_HELLOREQUEST = _descriptor.Descriptor(
  name='HelloRequest',
  full_name='HelloRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='HelloRequest.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=17,
  serialized_end=45,
)


_HELLOREPLY = _descriptor.Descriptor(
  name='HelloReply',
  full_name='HelloReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='HelloReply.message', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=47,
  serialized_end=76,
)

DESCRIPTOR.message_types_by_name['HelloRequest'] = _HELLOREQUEST
DESCRIPTOR.message_types_by_name['HelloReply'] = _HELLOREPLY

HelloRequest = _reflection.GeneratedProtocolMessageType('HelloRequest', (_message.Message,), dict(
  DESCRIPTOR = _HELLOREQUEST,
  __module__ = 'greeter_pb2'
  # @@protoc_insertion_point(class_scope:HelloRequest)
  ))
_sym_db.RegisterMessage(HelloRequest)

HelloReply = _reflection.GeneratedProtocolMessageType('HelloReply', (_message.Message,), dict(
  DESCRIPTOR = _HELLOREPLY,
  __module__ = 'greeter_pb2'
  # @@protoc_insertion_point(class_scope:HelloReply)
  ))
_sym_db.RegisterMessage(HelloReply)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class GreeterStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SayHello = channel.unary_unary(
        '/Greeter/SayHello',
        request_serializer=HelloRequest.SerializeToString,
        response_deserializer=HelloReply.FromString,
        )
    self.SayHelloGoodbye = channel.unary_stream(
        '/Greeter/SayHelloGoodbye',
        request_serializer=HelloRequest.SerializeToString,
        response_deserializer=HelloReply.FromString,
        )
    self.SayHelloToMany = channel.stream_stream(
        '/Greeter/SayHelloToMany',
        request_serializer=HelloRequest.SerializeToString,
        response_deserializer=HelloReply.FromString,
        )
    self.SayHelloToManyAtOnce = channel.stream_unary(
        '/Greeter/SayHelloToManyAtOnce',
        request_serializer=HelloRequest.SerializeToString,
        response_deserializer=HelloReply.FromString,
        )


class GreeterServicer(object):

  def SayHello(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SayHelloGoodbye(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SayHelloToMany(self, request_iterator, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SayHelloToManyAtOnce(self, request_iterator, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SayHello': grpc.unary_unary_rpc_method_handler(
          servicer.SayHello,
          request_deserializer=HelloRequest.FromString,
          response_serializer=HelloReply.SerializeToString,
      ),
      'SayHelloGoodbye': grpc.unary_stream_rpc_method_handler(
          servicer.SayHelloGoodbye,
          request_deserializer=HelloRequest.FromString,
          response_serializer=HelloReply.SerializeToString,
      ),
      'SayHelloToMany': grpc.stream_stream_rpc_method_handler(
          servicer.SayHelloToMany,
          request_deserializer=HelloRequest.FromString,
          response_serializer=HelloReply.SerializeToString,
      ),
      'SayHelloToManyAtOnce': grpc.stream_unary_rpc_method_handler(
          servicer.SayHelloToManyAtOnce,
          request_deserializer=HelloRequest.FromString,
          response_serializer=HelloReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Greeter', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaGreeterServicer(object):
  def SayHello(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def SayHelloGoodbye(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def SayHelloToMany(self, request_iterator, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def SayHelloToManyAtOnce(self, request_iterator, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaGreeterStub(object):
  def SayHello(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  SayHello.future = None
  def SayHelloGoodbye(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  def SayHelloToMany(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  def SayHelloToManyAtOnce(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  SayHelloToManyAtOnce.future = None


def beta_create_Greeter_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('Greeter', 'SayHello'): HelloRequest.FromString,
    ('Greeter', 'SayHelloGoodbye'): HelloRequest.FromString,
    ('Greeter', 'SayHelloToMany'): HelloRequest.FromString,
    ('Greeter', 'SayHelloToManyAtOnce'): HelloRequest.FromString,
  }
  response_serializers = {
    ('Greeter', 'SayHello'): HelloReply.SerializeToString,
    ('Greeter', 'SayHelloGoodbye'): HelloReply.SerializeToString,
    ('Greeter', 'SayHelloToMany'): HelloReply.SerializeToString,
    ('Greeter', 'SayHelloToManyAtOnce'): HelloReply.SerializeToString,
  }
  method_implementations = {
    ('Greeter', 'SayHello'): face_utilities.unary_unary_inline(servicer.SayHello),
    ('Greeter', 'SayHelloGoodbye'): face_utilities.unary_stream_inline(servicer.SayHelloGoodbye),
    ('Greeter', 'SayHelloToMany'): face_utilities.stream_stream_inline(servicer.SayHelloToMany),
    ('Greeter', 'SayHelloToManyAtOnce'): face_utilities.stream_unary_inline(servicer.SayHelloToManyAtOnce),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Greeter_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('Greeter', 'SayHello'): HelloRequest.SerializeToString,
    ('Greeter', 'SayHelloGoodbye'): HelloRequest.SerializeToString,
    ('Greeter', 'SayHelloToMany'): HelloRequest.SerializeToString,
    ('Greeter', 'SayHelloToManyAtOnce'): HelloRequest.SerializeToString,
  }
  response_deserializers = {
    ('Greeter', 'SayHello'): HelloReply.FromString,
    ('Greeter', 'SayHelloGoodbye'): HelloReply.FromString,
    ('Greeter', 'SayHelloToMany'): HelloReply.FromString,
    ('Greeter', 'SayHelloToManyAtOnce'): HelloReply.FromString,
  }
  cardinalities = {
    'SayHello': cardinality.Cardinality.UNARY_UNARY,
    'SayHelloGoodbye': cardinality.Cardinality.UNARY_STREAM,
    'SayHelloToMany': cardinality.Cardinality.STREAM_STREAM,
    'SayHelloToManyAtOnce': cardinality.Cardinality.STREAM_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'Greeter', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
